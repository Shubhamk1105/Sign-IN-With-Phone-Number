React Code


import React, { useEffect, useState } from "react";
import { Link, useNavigate } from "react-router-dom";
import axios from "axios";

const Appp = ({ setAuthenticated }) => {
    const searchParams = new URLSearchParams(window.location.search);
    const accessToken = searchParams.get('access_token');
    const [userDetails, setUserDetails] = useState({
        countryCode: "",
        phoneNo: "",
        phEmailJwt: ""
    });
    const [token, setToken] = useState("");
    const [message, setMessage] = useState("");
    const [isValidUser, setIsValidUser] = useState(false);
    const [userData, setUserData] = useState(null);
    const navigate = useNavigate();

    const CLIENT_ID = "18162157016561076763";
    const REDIRECT_URL = window.location.href;
    const AUTH_URL = `https://www.phone.email/auth/log-in?client_id=${CLIENT_ID}&redirect_url=${REDIRECT_URL}`;

    const httpRequest = async () => {
        try {
            const url = "https://eapi.phone.email/getuser";
            const data = new FormData();
            data.append("access_token", accessToken);
            data.append("client_id", CLIENT_ID);

            const response = await fetch(url, { method: "POST", body: data });

            if (!response.ok) {
                throw new Error("Network response was not ok");
            }

            const responseData = await response.json();

            if (responseData.status !== 200) {
                throw new Error("Something went wrong");
            }

            const phEmailJwt = responseData.ph_email_jwt;

            setUserDetails({
                countryCode: responseData.country_code,
                phoneNo: responseData.phone_no,
                phEmailJwt: phEmailJwt
            });

            const cookieExpire = new Date(Date.now() + 180 * 24 * 60 * 60 * 1000).toUTCString();
            document.cookie = `ph_email_jwt=${phEmailJwt}; expires=${cookieExpire}; path=/`;

            setToken(phEmailJwt);
            localStorage.setItem("token", phEmailJwt);

            // Store user details in local storage
            localStorage.setItem("userData", JSON.stringify(responseData));

            // Set userData state
            setUserData(responseData);

            navigate("/Products");
            window.location.reload();

        } catch (error) {
            console.error("Fetch error:", error);
        }
    };

    useEffect(() => {
        const storedToken = localStorage.getItem("token");
        if (storedToken) {
            setAuthenticated(true);
            setToken(storedToken);
            navigate("/Products");
        } else {
            setAuthenticated(false);
            navigate("/Appp");
        }
    }, []);

    useEffect(() => {
        if (accessToken) {
            httpRequest();
        }
    }, [accessToken]);

    useEffect(() => {
        if (userDetails.phoneNo) {
            fetchData(); // Call fetchData when userDetails.phoneNo is available
        }
    }, [userDetails.phoneNo]); // Add userDetails.phoneNo as a dependency

    const fetchData = async () => {
        try {
            const response = await axios.get(`http://localhost:8080/api/users/all?phoneNo=${userDetails.phoneNo}`);
            const userData = response.data;
            
            // Extracting username and email from the userData
            const { username, email } = userData;
            
            // Save username and email in local storage
            localStorage.setItem("userData", JSON.stringify({ username, email }));
            
            // Update state with fetched username and email
            setUserData({ username, email });
        } catch (error) {
            console.error("Error fetching data:", error);
        }
    };
    
    
    
    

    return (
        <>
          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', margin: '120px 30px' }}>
              <div style={{ color: '#024430 !important', textAlign: 'center', backgroundColor: '#fff', padding: '30px', borderRadius: '0.5rem', boxShadow: '0 1px 3px rgba(17, 24, 39, .09)', width: '100%', maxWidth: '420px', margin: '0 auto', fontFamily: 'sans-serif, serif, system-ui, -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Open Sans\', \'Helvetica Neue\', sans-serif', lineHeight: '28px', display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center' }}>
                  <img className="phe-login-img" width="250px" src="https://storage.googleapis.com/prod-phoneemail-prof-images/phem-widgets/phe-signin-box.svg"
                      alt="phone email login demo" />
                  <h1 style={{ margin: "10px" }}>Sign In</h1>
                  <p style={{ color: "#a6a6a6" }}>Welcome to Sign In with Wheatpantry</p>
                  <button
                      style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', padding: '14px 20px', backgroundColor: '#02BD7E', fontWeight: 'bold', color: '#ffffff', border: 'none', borderRadius: '3px', fontSize: 'inherit', cursor: 'pointer', maxWidth: '320px', width: '100%' }}
                      id="btn_ph_login"
                      name="btn_ph_login"
                      type="button"
                      onClick={() => window.open(AUTH_URL, 'peLoginWindow', 'toolbar=0,scrollbars=0,location=0,statusbar=0,menubar=0,resizable=0, width=500, height=560, top=' + (window.screen.height - 600) / 2 + ', left=' + (window.screen.width - 500) / 2)}>
                      <img src="https://storage.googleapis.com/prod-phoneemail-prof-images/phem-widgets/phem-phone.svg"
                          alt="phone email" style={{ marginRight: "10px" }} />
                      Sign In
                  </button>
                  <div className="text-center text-green-500 mt-2">
                      <span>or </span>
                      <Link to="/Register" className="text-green-500 font-semibold hover:underline">create an account</Link>
                  </div>
              </div>
          </div>
          {userData && (
              <div>
                   <h2>User Data:</h2>
        <p>Country Code: {userData.countryCode}</p>
        <p>Phone Number: {userData.phoneNo}</p>
        <p>JWT: {userData.phEmailJwt}</p>
        <p>Username: {userData.username}</p>
        <p>Email: {userData.email}</p>
              </div>
          )}
        </>
    );
};

export default Appp;


